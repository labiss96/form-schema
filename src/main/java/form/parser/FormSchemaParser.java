/* Generated By:JavaCC: Do not edit this line. FormSchemaParser.java */
package form.parser;

import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import form.ast.Enum;
import form.ast.Field;
import form.ast.Field.DefaultField;
import form.ast.Type;

public class FormSchemaParser implements FormSchemaParserConstants {

    /*
    Schema := Form
    Form := ( Field ";" )+
    Field := <IDENT> ":" Type [ "{" Option ( "," Option )* "}" ] [ Enums | EnumsRef ]
    Type := "string" | "number" | "boolean"
    Option := <IDENT> "=" <STRING>
    Enums := "[" Enum ( "," Enum )* "]"
    Enum := StringEnum | NumberEnum | BooleanEnum
    StringEnum := <STRING> [ ":" <STRING> ] [ ( "{" Form "}" ) | FormRef ]
    NumberEnum := <NUMBER> [ ":" <STRING> ] [ ( "{" Form "}" ) | FormRef ]
    BooleanEnum := <BOOLEAN> [ ( "{" Form "}" ) | FormRef ]
    EnumsRef := "#" <IDENT>
    FormRef := "$" <IDENT>
    */
    final public List<Field> schema() throws ParseException {
        List<Field> form;
        form = form();
        jj_consume_token(0);
        {
            if (true) return form;
        }
        throw new Error("Missing return statement in function");
    }

    // Form := ( Field ";" )+
    final public List<Field> form() throws ParseException {
        List<Field> l = new ArrayList();
        Field field = null;
        label_1:
        while (true) {
            field = field();
            l.add(field);
            jj_consume_token(SEMICOLON);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENT:
                    ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
        }
        {
            if (true) return l;
        }
        throw new Error("Missing return statement in function");
    }

    //Field := <IDENT> ":" Type [ "{" Option ( "," Option )* "}" ] [ Enums | EnumsRef ]
    final public Field field() throws ParseException {
        Token t;
        Type ty;
        Map<String, String> o = new HashMap();
        List<Enum> e;
        String er;
        DefaultField f = new DefaultField();
        t = jj_consume_token(IDENT);
        jj_consume_token(COLON);
        ty = type();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACE:
                jj_consume_token(LBRACE);
                option(o);
                label_2:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                            ;
                            break;
                        default:
                            jj_la1[1] = jj_gen;
                            break label_2;
                    }
                    jj_consume_token(COMMA);
                    option(o);
                }
                jj_consume_token(RBRACE);
                break;
            default:
                jj_la1[2] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACKET:
            case SHARP:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case LBRACKET:
                        e = enums();
                        f.enumList = e;
                        break;
                    case SHARP:
                        er = enumRef();
                        f.enumsRef = er;
                        break;
                    default:
                        jj_la1[3] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[4] = jj_gen;
                ;
        }
        f.id = t.image;
        f.type = ty;
        f.option = o;
        {
            if (true) return f;
        }
        throw new Error("Missing return statement in function");
    }

    //Type := "string" | "number" | "boolean"
    final public Type type() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case STRING_T:
                t = jj_consume_token(STRING_T);
                break;
            case NUMBER_T:
                t = jj_consume_token(NUMBER_T);
                break;
            case BOOLEAN_T:
                t = jj_consume_token(BOOLEAN_T);
                break;
            default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return Type.getType(t.image);
        }
        throw new Error("Missing return statement in function");
    }

    //Option := <IDENT> "=" <STRING>
    final public void option(Map<String, String> o) throws ParseException {
        Token k;
        Token s;
        k = jj_consume_token(IDENT);
        jj_consume_token(28);
        s = jj_consume_token(STRING);
        o.put(k.image, s.image);
    }

    //Enums := "[" Enum ( "," Enum )* "]"
    final public List<Enum> enums() throws ParseException {
        List<Enum> enums = new ArrayList();
        jj_consume_token(LBRACKET);
        _enum(enums);
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    break label_3;
            }
            jj_consume_token(COMMA);
            _enum(enums);
        }
        jj_consume_token(RBRACKET);
        {
            if (true) return enums;
        }
        throw new Error("Missing return statement in function");
    }

    //Enum := StringEnum | NumberEnum | BooleanEnum
    final public void _enum(List<Enum> enums) throws ParseException {
        Enum e;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case STRING:
                e = stringEnum();
                break;
            case NUMBER:
                e = numberEnum();
                break;
            case BOOLEAN:
                e = booleanEnum();
                break;
            default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        enums.add(e);
    }

    //StringEnum := <STRING> [ ":" <STRING> ] [ ( "{" Form "}" ) | FormRef ]
    final public Enum.StringEnum stringEnum() throws ParseException {
        Token key;
        Token n;
        List<Field> f;
        String fr;
        Enum.StringEnum e = new Enum.StringEnum();
        key = jj_consume_token(STRING);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COLON:
                jj_consume_token(COLON);
                n = jj_consume_token(STRING);
                e.name = n.image;
                break;
            default:
                jj_la1[8] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACE:
            case DOLLAR:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case LBRACE:
                        jj_consume_token(LBRACE);
                        f = form();
                        jj_consume_token(RBRACE);
                        e.form = f;
                        break;
                    case DOLLAR:
                        fr = formRef();
                        e.formRef = fr;
                        break;
                    default:
                        jj_la1[9] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[10] = jj_gen;
                ;
        }
        e.key = key.image;
        {
            if (true) return e;
        }
        throw new Error("Missing return statement in function");
    }

    //NumberEnum := <NUMBER> [ ":" <STRING> ] [ ( "{" Form "}" ) | FormRef ]
    final public Enum.NumberEnum numberEnum() throws ParseException {
        Token key;
        Token n;
        List<Field> f;
        String fr;
        Enum.NumberEnum e = new Enum.NumberEnum();
        key = jj_consume_token(NUMBER);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COLON:
                jj_consume_token(COLON);
                n = jj_consume_token(STRING);
                e.name = n.image;
                break;
            default:
                jj_la1[11] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACE:
            case DOLLAR:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case LBRACE:
                        jj_consume_token(LBRACE);
                        f = form();
                        jj_consume_token(RBRACE);
                        e.form = f;
                        break;
                    case DOLLAR:
                        fr = formRef();
                        e.formRef = fr;
                        break;
                    default:
                        jj_la1[12] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[13] = jj_gen;
                ;
        }
        e.key = Integer.parseInt(key.image);
        {
            if (true) return e;
        }
        throw new Error("Missing return statement in function");
    }

    //BooleanEnum := <BOOLEAN> [ ( "{" Form "}" ) | FormRef ]
    final public Enum.BooleanEnum booleanEnum() throws ParseException {
        Token key;
        List<Field> f;
        String fr;
        Enum.BooleanEnum e = new Enum.BooleanEnum();
        key = jj_consume_token(BOOLEAN);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACE:
            case DOLLAR:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case LBRACE:
                        jj_consume_token(LBRACE);
                        f = form();
                        jj_consume_token(RBRACE);
                        e.form = f;
                        break;
                    case DOLLAR:
                        fr = formRef();
                        e.formRef = fr;
                        break;
                    default:
                        jj_la1[14] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[15] = jj_gen;
                ;
        }
        e.key = Boolean.parseBoolean(key.image);
        {
            if (true) return e;
        }
        throw new Error("Missing return statement in function");
    }

    //EnumsRef := "#" <IDENT>
    final public String enumRef() throws ParseException {
        Token t;
        jj_consume_token(SHARP);
        t = jj_consume_token(IDENT);
        {
            if (true) return t.image;
        }
        throw new Error("Missing return statement in function");
    }

    //FormRef := "$" <IDENT>
    final public String formRef() throws ParseException {
        Token t;
        jj_consume_token(DOLLAR);
        t = jj_consume_token(IDENT);
        {
            if (true) return t.image;
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Generated Token Manager.
     */
    public FormSchemaParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[16];
    static private int[] jj_la1_0;

    static {
        jj_la1_init_0();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x800000, 0x80000, 0x2000, 0x108000, 0x108000, 0x700, 0x80000, 0x9400000, 0x40000, 0x202000, 0x202000, 0x40000, 0x202000, 0x202000, 0x202000, 0x202000,};
    }

    /**
     * Constructor with InputStream.
     */
    public FormSchemaParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public FormSchemaParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new FormSchemaParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor.
     */
    public FormSchemaParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new FormSchemaParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor with generated Token Manager.
     */
    public FormSchemaParser(FormSchemaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(FormSchemaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }


    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List jj_expentries = new java.util.ArrayList();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[29];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 16; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 29; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

}
