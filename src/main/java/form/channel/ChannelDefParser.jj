options {
  STATIC = false;
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(ChannelDefParser)
package form.channel;
import java.util.List;
import java.util.ArrayList;
import form.ast.Channel;
import form.ast.StringUtils;

public class ChannelDefParser {
}
PARSER_END(ChannelDefParser)

SKIP : /* WHITE SPACE */
{
  " " | "\t" | "\n" | "\r" | "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN: {
    <START_FORM: "("> : IN_FORM_CONTENT
}
<IN_FORM_CONTENT> TOKEN: {
    <TEXT: ~[")"]>
}
<IN_FORM_CONTENT> TOKEN : {
    <END_FORM: ")">: DEFAULT
}

TOKEN : /* SEPARATORS */
{
< COLON: ":" >
| < COMMA: "," >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENT: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < NUMBER: ( <DIGIT> )+ >
|
  < #LETTER:
      ["\u0024","\u0041"-"\u005a","\u005f","\u0061"-"\u007a","\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6","\u00f8"-"\u00ff","\u0100"-"\u1fff","\u3040"-"\u318f",
       "\u3300"-"\u337f","\u3400"-"\u3d2d","\u4e00"-"\u9fff","\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      ["\u0030"-"\u0039","\u0660"-"\u0669","\u06f0"-"\u06f9","\u0966"-"\u096f",
       "\u09e6"-"\u09ef","\u0a66"-"\u0a6f","\u0ae6"-"\u0aef","\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef","\u0c66"-"\u0c6f","\u0ce6"-"\u0cef","\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59","\u0ed0"-"\u0ed9","\u1040"-"\u1049"
      ]
  >
|
  <STRING: "\"" ( (~["\"","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\""] ) ) )* "\"">
}

/*
Channels := Channel ( "," Channel )*
Channel := <IDENT> ":" <STRING> [ "(" Form ")" ]
Form := <FORM>
*/

//Channels := Channel ( "," Channel )*
List<Channel> channels() :
{ List<Channel> chs = new ArrayList(); Channel ch;}
{
    ch=channel() { chs.add(ch); } ( "," ch=channel() { chs.add(ch); })* <EOF>
    { return chs; }
}

//Channel := <IDENT> ":" <STRING> [ "(" Form ")" ]
Channel channel() :
{ Token t; Token cn; String f; Channel ch = new Channel(); }
{
    t=<IDENT> ":" cn=<STRING> [ f=form() { ch.form=f; } ]
    { ch.id=t.image; ch.name=StringUtils.unquote(cn.image); return ch;}
}

String form() :
{ Token t; StringBuffer b = new StringBuffer(); }
{
   <START_FORM> (t=<TEXT> { b.append( t.image );})* <END_FORM>
   { return b.toString(); }
}
